name: Clang-Tidy on PR Files Only

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.cpp'
      - '**/*.h'
      - '**/*.hpp'
      - '**/*.cc'
      - '**/*.cxx'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  clang-tidy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: apt-${{ runner.os }}-${{ hashFiles('.github/workflows/clang-tidy.yml') }}

    - name: Install clang-tidy and minimal build deps
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          clang-tidy cmake build-essential qt6-base-dev libssl-dev qt6-tools-dev \
          qt6-tools-dev-tools libxkbcommon-dev libsodium-dev libvulkan-dev \
          libsqlcipher-dev qt6-svg-dev libgtest-dev libopencv-dev

    - name: Configure and build with CMake
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        make -j$(nproc)

    - name: Get list of changed C++ files
      id: changed-files
      run: |
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '.*\.(cpp|h|hpp|cc|cxx)$' || true)

        if [[ -n "$CHANGED_FILES" ]]; then
          echo "files_found=true" >> $GITHUB_OUTPUT
          CHANGED_FILES_ESCAPED=$(echo "$CHANGED_FILES" | tr '\n' ' ')
          echo "changed_files=$CHANGED_FILES_ESCAPED" >> $GITHUB_OUTPUT
        else
          echo "files_found=false" >> $GITHUB_OUTPUT
        fi

    - name: Exit if no C++ files changed
      if: steps.changed-files.outputs.files_found == 'false'
      run: echo "No C++ files changed in this PR."

    - name: Run clang-tidy
      if: steps.changed-files.outputs.files_found == 'true'
      run: |
        echo "Running clang-tidy on: ${{ steps.changed-files.outputs.changed_files }}"
        clang-tidy -p build ${{ steps.changed-files.outputs.changed_files }} > build/tidy-report.txt 2>&1 || true
        cat build/tidy-report.txt

    - name: Upload tidy report
      if: steps.changed-files.outputs.files_found == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: clang-tidy-report
        path: build/tidy-report.txt

    - name: Comment PR with clang-tidy results
      if: steps.changed-files.outputs.files_found == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'build/tidy-report.txt';
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8').trim();
            const changedFiles = `${{ steps.changed-files.outputs.changed_files }}` || '<file-list>';

            const body = report
              ? `## 🔍 Clang-Tidy Report

          \`\`\`
          ${report}
          \`\`\`

          ---

          <details>
          <summary>💡 How to fix most issues</summary>

          Most issues can be fixed automatically with:

          \`\`\`bash
          clang-tidy -p build --fix-errors ${changedFiles}
          \`\`\`

          This will apply suggested fixes to the files in-place.

          > 💡 Tip: Run this locally and inspect the diffs before committing.

          </details>`
              : '## ✅ Clang-Tidy Report\n\nNo issues found in the changed files! 🎉';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
          }
